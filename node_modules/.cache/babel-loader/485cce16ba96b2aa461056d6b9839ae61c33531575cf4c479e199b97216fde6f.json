{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport accountSlice, { payLoan } from \"../accounts/accountSlice\";\nconst initialState = {\n  fullName: \"\",\n  nationalID: \"\",\n  createdAt: \"\"\n};\nconst customerSlice = createSlice({\n  name: 'customer',\n  initialState,\n  reducers: {\n    createCustomer: {\n      prepare(fullName, nationalID) {\n        return {\n          payload: {\n            fullName,\n            nationalID,\n            createdAt: new Date().toISOString()\n          }\n        };\n      },\n      reducer(state, action) {\n        state.fullName = action.payload.fullName;\n        state.nationalID = action.payload.nationalID;\n        state.createdAt = action.payload.createdAt;\n      }\n    },\n    updateName(state, action) {\n      state.fullName = action.payload;\n    }\n  }\n});\nexport const {\n  createCustomer,\n  updateName\n} = customerSlice.actions;\nexport default customerSlice.reducer;\n// export default function customerReducer(state = initialStateCustomer, action) {\n//     switch (action.type) {\n//         case \"customer/createCustomer\":\n//             return {\n//                 ...state,\n//                 fullName: action.payload.fullName,\n//                 nationalID: action.payload.nationalID,\n//                 createdAt: action.payload.createdAt,\n//             };\n//         case \"customer/updateName\":\n//             return { ...state, fullName: action.payload };\n//         default:\n//             return state;\n//     }\n// }\n\n// export function createCustomer(fullName, nationalID) {\n//     return {\n//         type: \"customer/createCustomer\",\n//         payload: { fullName, nationalID, createdAt: new Date().toISOString() },\n//     };\n// }\n\n// export function updateName(fullName) {\n//     return { type: \"customer/updateName\", payload: fullName };\n// }","map":{"version":3,"names":["createSlice","accountSlice","payLoan","initialState","fullName","nationalID","createdAt","customerSlice","name","reducers","createCustomer","prepare","payload","Date","toISOString","reducer","state","action","updateName","actions"],"sources":["D:/react.js/ultimate-react-course-main/15-redux-intro/starter/src/featuers/customers/customerSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport accountSlice, { payLoan } from \"../accounts/accountSlice\";\r\nconst initialState = {\r\n    fullName: \"\",\r\n    nationalID: \"\",\r\n    createdAt: \"\",\r\n};\r\n\r\nconst customerSlice = createSlice({\r\n    name: 'customer',\r\n    initialState,\r\n    reducers: {\r\n        createCustomer: {\r\n            prepare(fullName, nationalID) {\r\n                return {\r\n                    payload: {\r\n                        fullName, nationalID, createdAt: new Date().toISOString(),\r\n                    }\r\n                }\r\n            },\r\n            reducer(state,action){\r\n                state.fullName = action.payload.fullName;\r\n                state.nationalID = action.payload.nationalID;\r\n                state.createdAt = action.payload.createdAt;\r\n            }\r\n        },\r\n        updateName(state,action){\r\n            state.fullName = action.payload;\r\n        }\r\n    }\r\n})\r\nexport const {createCustomer,updateName } = customerSlice.actions;\r\nexport default customerSlice.reducer;\r\n// export default function customerReducer(state = initialStateCustomer, action) {\r\n//     switch (action.type) {\r\n//         case \"customer/createCustomer\":\r\n//             return {\r\n//                 ...state,\r\n//                 fullName: action.payload.fullName,\r\n//                 nationalID: action.payload.nationalID,\r\n//                 createdAt: action.payload.createdAt,\r\n//             };\r\n//         case \"customer/updateName\":\r\n//             return { ...state, fullName: action.payload };\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\n// export function createCustomer(fullName, nationalID) {\r\n//     return {\r\n//         type: \"customer/createCustomer\",\r\n//         payload: { fullName, nationalID, createdAt: new Date().toISOString() },\r\n//     };\r\n// }\r\n\r\n// export function updateName(fullName) {\r\n//     return { type: \"customer/updateName\", payload: fullName };\r\n// }\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,YAAY,IAAIC,OAAO,QAAQ,0BAA0B;AAChE,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EAAE;EACZC,UAAU,EAAE,EAAE;EACdC,SAAS,EAAE;AACf,CAAC;AAED,MAAMC,aAAa,GAAGP,WAAW,CAAC;EAC9BQ,IAAI,EAAE,UAAU;EAChBL,YAAY;EACZM,QAAQ,EAAE;IACNC,cAAc,EAAE;MACZC,OAAOA,CAACP,QAAQ,EAAEC,UAAU,EAAE;QAC1B,OAAO;UACHO,OAAO,EAAE;YACLR,QAAQ;YAAEC,UAAU;YAAEC,SAAS,EAAE,IAAIO,IAAI,EAAE,CAACC,WAAW;UAC3D;QACJ,CAAC;MACL,CAAC;MACDC,OAAOA,CAACC,KAAK,EAACC,MAAM,EAAC;QACjBD,KAAK,CAACZ,QAAQ,GAAGa,MAAM,CAACL,OAAO,CAACR,QAAQ;QACxCY,KAAK,CAACX,UAAU,GAAGY,MAAM,CAACL,OAAO,CAACP,UAAU;QAC5CW,KAAK,CAACV,SAAS,GAAGW,MAAM,CAACL,OAAO,CAACN,SAAS;MAC9C;IACJ,CAAC;IACDY,UAAUA,CAACF,KAAK,EAACC,MAAM,EAAC;MACpBD,KAAK,CAACZ,QAAQ,GAAGa,MAAM,CAACL,OAAO;IACnC;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAM;EAACF,cAAc;EAACQ;AAAW,CAAC,GAAGX,aAAa,CAACY,OAAO;AACjE,eAAeZ,aAAa,CAACQ,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
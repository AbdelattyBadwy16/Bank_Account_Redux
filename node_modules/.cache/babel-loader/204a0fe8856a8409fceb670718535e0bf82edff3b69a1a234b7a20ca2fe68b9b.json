{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialStateAccount = {\n  balance: 0,\n  loan: 0,\n  loanPurpose: \"\"\n};\nconst accountSlice = createSlice({\n  name: \"account\",\n  initialStateAccount,\n  reducers: {\n    deposit(state, action) {\n      state.balance = state.balance + action.payload;\n    },\n    withdraw(state, action) {\n      state.balance -= action.payload;\n    },\n    requestLoan(state, action) {\n      if (state.loan > 0) return;\n      state.loan = action.payload.amount;\n      state.loanPurpose = action.payload.purpose;\n      state.balance = state.balance + action.payload.amount;\n    }\n  }\n});\n// export default function accountReducer(state = initialStateAccount, action) {\n//     switch (action.type) {\n//         case \"account/deposit\":\n//             return { ...state, balance: state.balance + action.payload };\n//         case \"account/withdraw\":\n//             return { ...state, balance: state.balance - action.payload };\n//         case \"account/requestLoan\":\n//             if (state.loan > 0) return state;\n//             // LATER\n//             return {\n//                 ...state,\n//                 loan: action.payload.amount,\n//                 loanPurpose: action.payload.purpose,\n//                 balance: state.balance + action.payload.amount,\n//             };\n//         case \"account/payLoan\":\n//             return {\n//                 ...state,\n//                 loan: 0,\n//                 loanPurpose: \"\",\n//                 balance: state.balance - state.loan,\n//             };\n\n//         default:\n//             return state;\n//     }\n// }\n\n// export function deposit(amount,currency) {\n//     if(currency===\"USD\")\n//     return { type: \"account/deposit\", payload: amount };\n\n//     return async function(dispatch,getState){\n//         const host = 'api.frankfurter.app';\n//         const res = await fetch(`https://${host}/latest?amount=${amount}&from=${currency}&to=USD`);\n//         const data = await res.json();\n//         const converted = data.rates.USD;\n\n//         dispatch({ type: \"account/deposit\", payload: converted });\n//     }\n// }\n\n// export function withdraw(amount) {\n//     return { type: \"account/withdraw\", payload: amount };\n// }\n\n// export function requestLoan(amount, purpose) {\n//     return {\n//         type: \"account/requestLoan\",\n//         payload: { amount, purpose },\n//     };\n// }\n\n// export function payLoan() {\n//     return { type: \"account/payLoan\" };\n// }","map":{"version":3,"names":["createSlice","initialStateAccount","balance","loan","loanPurpose","accountSlice","name","reducers","deposit","state","action","payload","withdraw","requestLoan","amount","purpose"],"sources":["D:/react.js/ultimate-react-course-main/15-redux-intro/starter/src/featuers/accounts/accountSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst initialStateAccount = {\r\n    balance: 0,\r\n    loan: 0,\r\n    loanPurpose: \"\",\r\n};\r\n\r\nconst accountSlice = createSlice({\r\n    name: \"account\",\r\n    initialStateAccount,\r\n    reducers: {\r\n        deposit(state, action) {\r\n            state.balance = state.balance + action.payload;\r\n        },\r\n        withdraw(state, action) {\r\n            state.balance -= action.payload;\r\n        },\r\n        requestLoan(state,action){\r\n            if(state.loan>0)return;\r\n\r\n            state.loan = action.payload.amount; \r\n            state.loanPurpose = action.payload.purpose;\r\n            state.balance = state.balance + action.payload.amount;\r\n        }\r\n    }\r\n})\r\n// export default function accountReducer(state = initialStateAccount, action) {\r\n//     switch (action.type) {\r\n//         case \"account/deposit\":\r\n//             return { ...state, balance: state.balance + action.payload };\r\n//         case \"account/withdraw\":\r\n//             return { ...state, balance: state.balance - action.payload };\r\n//         case \"account/requestLoan\":\r\n//             if (state.loan > 0) return state;\r\n//             // LATER\r\n//             return {\r\n//                 ...state,\r\n//                 loan: action.payload.amount,\r\n//                 loanPurpose: action.payload.purpose,\r\n//                 balance: state.balance + action.payload.amount,\r\n//             };\r\n//         case \"account/payLoan\":\r\n//             return {\r\n//                 ...state,\r\n//                 loan: 0,\r\n//                 loanPurpose: \"\",\r\n//                 balance: state.balance - state.loan,\r\n//             };\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n// export function deposit(amount,currency) {\r\n//     if(currency===\"USD\")\r\n//     return { type: \"account/deposit\", payload: amount };\r\n\r\n//     return async function(dispatch,getState){\r\n//         const host = 'api.frankfurter.app';\r\n//         const res = await fetch(`https://${host}/latest?amount=${amount}&from=${currency}&to=USD`);\r\n//         const data = await res.json();\r\n//         const converted = data.rates.USD;\r\n\r\n//         dispatch({ type: \"account/deposit\", payload: converted });\r\n//     }\r\n// }\r\n\r\n// export function withdraw(amount) {\r\n//     return { type: \"account/withdraw\", payload: amount };\r\n// }\r\n\r\n// export function requestLoan(amount, purpose) {\r\n//     return {\r\n//         type: \"account/requestLoan\",\r\n//         payload: { amount, purpose },\r\n//     };\r\n// }\r\n\r\n// export function payLoan() {\r\n//     return { type: \"account/payLoan\" };\r\n// }"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,IAAI,EAAE,CAAC;EACPC,WAAW,EAAE;AACjB,CAAC;AAED,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfL,mBAAmB;EACnBM,QAAQ,EAAE;IACNC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACnBD,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,QAAQA,CAACH,KAAK,EAAEC,MAAM,EAAE;MACpBD,KAAK,CAACP,OAAO,IAAIQ,MAAM,CAACC,OAAO;IACnC,CAAC;IACDE,WAAWA,CAACJ,KAAK,EAACC,MAAM,EAAC;MACrB,IAAGD,KAAK,CAACN,IAAI,GAAC,CAAC,EAAC;MAEhBM,KAAK,CAACN,IAAI,GAAGO,MAAM,CAACC,OAAO,CAACG,MAAM;MAClCL,KAAK,CAACL,WAAW,GAAGM,MAAM,CAACC,OAAO,CAACI,OAAO;MAC1CN,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO,CAACG,MAAM;IACzD;EACJ;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}